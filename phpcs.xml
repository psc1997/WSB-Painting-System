<?xml version="1.0"?>
<ruleset name="Inpsyde PHP Coding Standards">
    <!-- https://github.com/inpsyde/php-coding-standards -->

    <description>[...]</description>

    <exclude-pattern>site/wp-admin/*</exclude-pattern>
	<exclude-pattern>site/wp-includes/*</exclude-pattern>
    <exclude-pattern>site/wp-content/backups-dup-lite/*</exclude-pattern>
    <exclude-pattern>site/wp-content/languages/*</exclude-pattern>
    <exclude-pattern>site/wp-content/plugins/*</exclude-pattern>
    <exclude-pattern>site/wp-content/upgrade/*</exclude-pattern>
    <exclude-pattern>site/wp-content/uploads/*</exclude-pattern>
	<!-- <exclude-pattern>site/wp-*.php</exclude-pattern> -->

	<exclude-pattern>site/index.php</exclude-pattern>
	<exclude-pattern>site/xmlrpc.php</exclude-pattern>

	<exclude-pattern>vendor/*</exclude-pattern>
	<exclude-pattern>node_modules/*</exclude-pattern>

    <file>./src</file>
    <file>./tests/src</file>

    <arg value="sp"/>
    <arg name="colors"/>

    <config name="testVersion" value="7.2"/>

    <!-- Moreover, thanks to the text_domain setting, Code Sniffer will also check that all WP internationalization functions are called with the proper text domain. -->
    <config name="text_domain" value="mda_theme"/>

    <rule ref="Inpsyde">
        <!-- <exclude name="WordPress.PHP.DiscouragedPHPFunctions.serialize_serialize" /> -->
        <exclude name="Generic.Files.LineEndings.InvalidEOLChar"/>
        <exclude name="Generic.Metrics.NestingLevel.TooHigh"/>
        <exclude name="Generic.PHP.CharacterBeforePHPOpeningTag.Found"/>
        <exclude name="Generic.WhiteSpace.ScopeIndent.IncorrectExact"/>
        <exclude name="Generic.WhiteSpace.ScopeIndent.Incorrect"/>
        <exclude name="PSR1.Files.SideEffects.FoundWithSymbols"/>
        <exclude name="Inpsyde.CodeQuality.VariablesName.SnakeCaseVar"/>
        <exclude name="Inpsyde.CodeQuality.NoElse.ElseFound"/>
        <exclude name="Inpsyde.CodeQuality.FunctionLength.TooLong"/>
        <exclude name="Inpsyde.CodeQuality.LineLength.TooLong"/>
        <exclude name="NeutronStandard.Globals.DisallowGlobalFunctions.GlobalFunctions"/>
        <exclude name="NeutronStandard.StrictTypes.RequireStrictTypes.StrictTypes"/>
        <exclude name="NeutronStandard.AssignAlign.DisallowAssignAlign.Aligned"/>
        <exclude name="WordPress.VIP.SuperGlobalInputUsage.AccessDetected"/>
    </rule>

    <rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis">
        <properties>
            <property name="validUndefinedVariableNames" value="args"/>
        </properties>
    </rule>

    <rule ref="PSR12">
        <exclude name="PSR12.Files.FileHeader.SpacingAfterBlock"/>
    </rule>

    <!-- <rule ref="Inpsyde.CodeQuality.Psr4">
        <properties>
            <property
                name="psr4"
                type="array"
                value="Inpsyde\MyProject=>src,Inpsyde\MyProject\Tests=>tests/src|tests/unit"/>
        </properties>
    </rule>

    <rule ref="Inpsyde.CodeQuality.ElementNameMinimalLength">
        <properties>
            <property name="additionalAllowedNames" type="array" value="c,me,my" />
        </properties>
    </rule> -->

</ruleset>